---
title: "Teiler und Vielfache"
jupyter: python3
---

In diesem Kapitel machen wir einen kleinen Ausflug in die Welt der Zahlen und beschäftigen uns mit der Teilbarkeit natürlicher Zahlen.
Außerdem wollen wir unsere ersten Funktionen in Python definieren und einen ersten Algorithmus implementieren.

## Primfaktorzerlegung {#sec-primfaktor}

Primzahlen spielen in der Mathematik eine erstaunlich große Rolle, wir wollen sie hier aber nur im Rahmen der Teilbarkeit von natürlichen Zahlen betrachten.

Eine Primzahl ist eine natürliche Zahl, die genau zwei Teiler hat (und somit größer als 1 ist).
Diese zwei Teiler sind 1 und die Zahl selber.
Eine Primzahl kann daher nicht als das *Produkt* zweier kleineren Zahlen geschrieben werden, also nicht in *Faktoren* zerlegt werden.
Alle anderen natürlichen Zahlen können dagegen in *Primfaktoren* zerlegt werden, d.h. sie können als das Produkt von zwei oder mehr Primzahlen geschrieben werden.

::: {.callout-important}
## Fundamentalsatz der Arithmetik
Jede natürliche Zahl $n>1$ besitzt eine (bis auf die Reihenfolge) eindeutige **Primfakorzerlegung**, d.h. zwei unterschiedliche Zerlegungen unterscheiden sich nur in der Reihenfolge der Faktoren.
:::

::: {.callout-tip}
## Beispiele für Primfaktorzerlegungen
- $30=2\cdot 3 \cdot 5$
- $37=37$ (Primzahl)
- $1001=7\cdot 11 \cdot 13$
- $1024=\underbrace{2\cdots 2}_\text{10 mal}=2^{10}$ (Zweierpotenz)
- $6936=2\cdot 2\cdot 2\cdot 3\cdot 17\cdot 17=2^3\cdot 3\cdot 17^2$
- $10000=2^4\cdot 5^4$ (Zehnerpotenz)
:::

Wenn du mit der Potenzdartsellung von Zahlen noch nicht vertraut bist, schaue dir ??? an; dort erhältst du eine Einführung in Potenzrechnung.

::: {.callout-caution}
## Zwischenübung
Zerlege die Zahlen 12, 60, 128 und 1.000 in ihre Primfaktoren und stelle sie in Potenzen dieser Faktoren dar.
:::

::: {.callout-tip collapse="true"}
## Lösung
- $12=2\cdot 2\cdot 3=2^2\cdot 3^1$
- $60=2\cdot 2\cdot 3\cdot 5=2^2\cdot 3^1\cdot 5^1$
- $128=\underbrace{2\cdots 2}_\text{7 mal}=2^7$ (Zweierpotenz)
- $1.000=2^3\cdot 5^3=10\cdot 10\cdot 10=10^3$ (Zehnerpotenz: die drei Nullen der Ausgangszahl führen zur dritten Potenz von 10)
:::


## Division mit Rest {#sec-division}

Wenn zwei natürliche Zahlen, der Dividend $n$, und der Divisor $m$ (ungleich 0) mit Rest dividiert werden sollen, wenn also $n\div m$ berechnet werden soll, so wird gefragt, wie man die Zahl $n$ als Vielfaches von $m$ und einem Rest darstellen kann:

::: {.callout-important}
## Division mit Rest
$$
n = m \cdot q + r, \quad 0 \leq r < m.
$$ {#eq-divmitrest}
Hier ist $q$ der sogenannte *Ganzzahlqotient* und $r$ der *Rest* der Division.
Entscheidende Nebenbedingung ist, dass $r$ eine ganze Zahl größer oder gleich 0 und kleiner $m$ ist.
:::

Der Rest ist also die Differenz zwischen dem Dividenden $n$ und dem größten Vielfachen des Divisors $m$, das höchstens so groß ist wie der Dividend: $\ r=n-m\cdot q$.\
Ein Rest ungleich 0 ergibt sich folglich genau dann, wenn der Dividend kein Vielfaches des Divisors ist.
Man sagt auch: Der Dividend ist nicht durch den Divisor teilbar, weshalb ein Rest übrigbleibt.

::: {.callout-tip}
## Beispiele für Division mit Rest
- $9 \div 4 = 2 \ $ mit Rest $1$, weil $\ 9=4\cdot 2 + 1$ (vier passt zweimal in neun und es bleibt eins übrig)
- $2 \div 4 = 0 \ $ mit Rest $2$, weil $\ 2=4\cdot 0 + 2$
- $4 \div 4 = 1 \ $ mit Rest $0$, weil $\ 4=4\cdot 1 + 0$
:::

::: {.callout-caution}
## Zwischenübung
Stelle das Ergebnis der fogenden Divisionen als ganze Zahl mit Rest dar:

- $128\div 127$
- $127\div 128$
- $777\div 11$
:::

::: {.callout-tip collapse="true"}
## Lösung
- $128\div 127=1$, Rest 1
- $127\div 128=0$, Rest 127
- $777\div 11=70$, Rest 7
:::

Man kann eine Funktion definieren, die jedem Zahlenpaar $(n, m)$ einen eindeutigen Teilerrest $r$ zuordnet. Diese Funktion nennt man *Modulo* und kürzt sie meistens mit *mod* ab.

Wir werden uns in späteren Kapiteln ausführlich mit Funktionen beschäftigen (siehe ???);
ohne auf die Details einzugehen, wollen wir an dieser Stelle die Funktion Modulo in Python implementieren, um uns mit der Syntax einer Funktionsdefinition vertraut zu machen.
Vergegenwärtigen wir uns hierzu nochmal die obige Definition des Restes einer ganzzahligen Division:
$$
r=n-m\cdot q,
$$
wobei $q$ der ganzzahlige Quotient von $n \div m$ ist.

```{python}
def mod(n, m):                  # <1>
  q = n // m                    # <2>
  r = n - m * q                 # <3>
  return r                      # <4>

assert mod(9,4) == 1
assert mod(2,4) == 2
assert mod(4,4) == 0
```
1. Eine Funtionsdefinition wird eingeleitet mit dem Schlüsselwort `def`, gefolgt von den Parametern der Funktion in Klammern und einem Doppelpunkt `:`, der den Beginn eines Code-Blocks signalisiert.
Alle nachfolgenden Zeilen, die zu diesem Code-Block gehören sollen, werden um die selbe Anzahl von Stellen eingerückt.
2. Zuweisung des Ergebnisses der ganzzahligen Division $n \div m$ an den Bezeichner `q`. Wir wählen hier die selben Bezeichner, die wir auch in der mathematischen Definition verwendet haben.
3. Berechnung des Restes der Division gemäß der mathematischen Definition und Zuweisung an den Bezeichner `r`.
4. Die Funtion liefert den Rest der Division `r` als ihr Ergebnis zurück.
Dies wird mit dem Schlüsselwort `return` angezeigt.

## Gößter gemeinsamer Teiler {#sec-ggT}

Der **größte gemeinsame Teiler** (*ggT*) ist die größte natürliche Zahl, durch die sich zwei ganze Zahlen jeweils ohne Rest teilen lassen.
Der *ggT* zweier ganzer Zahlen $a$ und $b$ ist demnach eine ganze Zahl $m$ mit der Eigenschaft, dass sie Teiler sowohl von $a$ als auch von $b$ ist und dass jede ganze Zahl, die ebenfalls die Zahlen $a$ und $b$ teilt, auch Teiler von $m$ ist.

Man kann den *ggT* über die *Primfaktorzerlegung* der beiden gegebenen Zahlen bestimmen.
Wir wollen das einmal exemplarisch für die beiden Zahlen 3528 und 3780 durchführen:

::: {.callout-tip}
## Primfaktozerlegung für 3528 und 3780
- $3528=2^3\cdot 3^2\cdot 5^0\cdot 7^2$
- $3780=2^2\cdot 3^3\cdot 5^1\cdot 7^1$
:::

```{python}
assert 2**3 * 3**2 * 5**0 * 7**2 == 3528
assert 2**2 * 3**3 * 5**1 * 7**1 == 3780
```

Primfaktoren, die in einer der beiden Zahlen nicht vorkommen, können wir dabei in der Form $x^0$ darstellen, um einen besseren Überblick über die Faktoren zu erhalten.
$x^0$ ergibt immer 1, daher hat dieser zusätzliche Faktor keinen Einfluß auf das ensprechende Produkt.

Für den *ggT* nimmt man die Primfaktoren, die in beiden Zerlegungen vorkommen, und als zugehörigen Exponenten den jeweils *kleineren* der Ausgangsexponenten:

::: {.callout-tip}
## Größter gemeinsamer Teiler für 3528 und 7380
$ggT(3528, 3780)=2^2\cdot 3^2\cdot 5^0\cdot 7^1=252$
:::

```{python}
assert 2**2 * 3**2 * 5**0 * 7**1 == 252
```

Die Berechnung der Primfaktorzerlegung großer Zahlen und damit auch die Bestimmung des größten gemeinsamen Teilers über die Primfaktorzerlegungen ist sehr aufwändig.
Mit dem *euklidischen Algorithmus* existiert jedoch auch ein effizientes Verfahren, um den größten gemeinsamen Teiler zweier Zahlen zu berechnen.

Unter einem *Algorithmus* verstehen wir eine detaillierte, schrittweise Rechenvorschrift, in der sich möglichweise einige Schritte wiederholen, die am Ende das gewünschte Resultat ausgibt.

::: {.callout-note}
## Klassischer euklidischer Algorithmus
Der *klassische* euklidische Algorithmus berechnet den größten gemeinsamen Teiler, indem er nach einem gemeinsamen Maß für die Längen zweier Linien sucht:

1. Die kleinere zweier Längen wird von der größeren mehrfach abgezogen, bis ein Ergebnis übrig bleibt, das kleiner als die kleinere Länge ist.
2. Bei einer Differenz von 0 ist man fertig und die kleinere Länge das Ergebnis.
3. Andernfalls wiederholt man dieses Abziehen – jetzt aber mit der kleineren Länge anstelle der größeren und der letzten Differenz anstelle der kleineren Länge.
:::

::: {.callout-tip}
## Berechnung des *ggT* von 143 und 65
- $143-65=78$
- $78-65=13, \quad (<65)$
- $65-13=52$
- $52-13=39$
- $39-13=26$
- $26-13=13$
- $13-13=0, \quad ggT = 13$
:::

::: {.callout-caution}
## Zwischenübung
Prüfe, ob du diese Rechenvorschrift verstanden hast, indem du sie mit den Werten 60 und 24 selbst durchführst.
:::

::: {.callout-tip collapse="true"}
## Lösung
- $60-24=36$
- $36-24=12, \quad (<24)$
- $24-12=12$
- $12-12=0, \quad ggt = 12$
:::

Mit diesem Wissen können wir jetzt den Algorithmus in Python implementieren:

```{python}
def euklid_klassisch(a, b):                 # <1>
  if b > a: a, b = b, a                     # <2>
  zähler = 1                               # <3>
  d = a - b                                 # <4>
  while d > 0:                              # <5>
    if d < b: a, b = b, d                   # <6>
    else: a = d                             # <7>
    d = a - b                               # <8>
    zähler += 1                            # <9>
  print(zähler)                            # <10>
  return b                                  # <11>

```
1. Definition der Funktion `euklid_klassisch`.
Um genau zu sein, bezeichen wir diese Zeile als die *Signatur* der Funktion, die den Namen der Funktion und deren Parameter enthält. Der nachfolgende (eingerückte) Code-Block gehört ebenfalls zur Funktionsdefinition.
2. Wir wollen immer die kleinere von der größeren Länge abziehen.
Da wir aber nicht wissen, welche der gegebenen Funktionsparameter der größere ist, testen wir das mit `if b > a`: wenn `b` größer ist als `a`, dann vertauschen wir die Parameter.
Auf diese Weise stellen wir sicher, dass `a` immer die größere Länge bezeichnet.
3. Diese Zeile ist für den Algorithmus eigentlich nicht notwendig.
Wir wollen aber die Anzahl der durchgeführten Subtraktionen nachverfolgen, um eine Aussage über die Effizienz des Algorithmus machen zu können.
Also legen wir einen Zähler an, den wir mit 1 initialisieren, da wir in der folgenden Zeile gleich die erste Subtraktion durchführen.
4. Bestimmen der ersten Differenz zwischen `a` und `b`. Wir wissen aus (2), dass `a` immer die größere Länge ist.
5. Der Algorithmus besagt in seinem 1. Schritt, das wir wiederholt die kleinere von der größeren Länge abziehen müssen.
Daher starten wir eine Programm-Schleife mit dem Schlüsselwort `while` und geben als Schleifenbedingung `d > 0` an.
Damit werden die Anweisungen in der Schleife solange wiederholt bis die Differenz gleich 0 ist.
Wir wissen aus Schritt 2 des Algorithmus, dass wir dann fertig sind.
6. Innerhalb der Schleife prüfen wir zuerst, ob die letzte Differenz kleiner ist als die kleinere Länge (`b`). Falls ja, vertauschen wir `a` mit `b`, und `b` mit `d`, so wie in Schritt 3 des Algorithmus gefordert.
7. Anderenfalls ersetzen wir `a` mit `d`, wie in Schritt 1 des Algorithmus gefordert.
8. In beiden Fällen berechnen wir schließlich die Differenz der neuen großen und kleinen Länge.
9. Als letzte Anweisung in der Schleife erhöhen wir den Zähler um 1.
10. Nach der Schleife geben wir die Gesamtanzahl der durchgeführten Subtraktionen aus.
11. Die letze Anweisung der Funktion gibt die aktuelle kleinere Länge als Funktionswert zurück.
Gemäß Schritt 2 des Algorithmus ist das unser Ergebnis: der kleinste gemeinsame Teiler von `a` und `b`.

```{python}
assert euklid_klassisch(143, 65) == 13
assert euklid_klassisch(3528, 3780) == 252
```

Wir sehen, dass es keine Rolle spielt, in welcher Reihenfolge wir die Argumente der Funktion angeben, es wird immer das korrekte Ergebnis ausgegeben.

::: {.callout-note}
## Parameter und Argumente
Die Variablen, die wir in der Funktionsdefinition in Klammern angeben, heißen **Parameter** der Funktion. Wenn wir eine Funktion dann mit konkreten Werten aufrufen, nennen wir diese Werte **Argumente** der Funktion. 
:::

Wir sehen aber auch, dass die Anzahl der notwendigen Operationen (in diesem Fall Subtraktionen) zunimmt, wenn die Argumente größer werden.
Dies kann bei sehr großen Zahlen zu Effizienzproblemen führen, im schlimmsten Fall dazu, dass die Funktion kein Ergebnis mehr liefert.
Wenn wir Algorithmen in einer Programmiersprache implementieren, wollen wir also auch immer darauf achten, eine möglichst effiziente Lösung zu finden, d.h. eine Lösung, die mit weniger Operationen auskommt.

In unserem Beispiel `euklid_klassisch(143, 65)` sehen wir, dass die Funktion 7 Subtraktionen für die Berechnung des Ergebnisses benötigt; das stimmt mit unserer manuellen Berechnung überein, die nachfolgend noch einmal angegeben wird:

::: {.callout-tip}
## Berechnung des *ggT* von 143 und 65
- $143-65=78$
- $78-65=13, \quad (<65)$
- $65-13=52$
- $52-13=39$
- $39-13=26$
- $26-13=13$
- $13-13=0, \quad ggT = 13$
:::

Bei näherer Betrachtung erkennen wir, dass zunächst zweimal `65` von `143` abgezogen wird, und dann fünfmal `13` von `65` abgezogen wird.
Das ist kein Zufall, denn `65` passt zweimal in `143` und `13` passt fünfmal in `143`, da $2\cdot 65+rest=143$ und $5\cdot 13+rest=65$, wobei der Rest im ersten Fall 13 ist und im zweiten Fall 0, d.h. `13` passt *genau* fünfmal in `65`.
Das erinnert doch sehr an die Division mit Rest aus @sec-division.

Anstatt also $n$-mal `b` von `a` abzuziehen , können wir `a` durch `b` teilen, mit dem Ergebnis $n$ und Rest $r$.
Am ganzzahligen Quotienten $n$ sind wir gar nicht interessiert, sondern wir können gleich mit dem Rest $r$ weiterrechnen, so wie in den Zeilen 3 bis 7 der manuellen Berechnung (der Rest $r$ ist hier 13).

Diese Überlegungen führen zum sogenannten *modernen euklidischen Algorithmus*:

::: {.callout-note}
## Moderner euklidischer Algorithmus
In den aufeinanderfolgenden Schritten wird jeweils eine Division mit Rest durchgeführt, wobei im nächsten Schritt der Divisor zum neuen Dividenden und der Rest zum neuen Divisor wird.
Der Divisor, bei dem sich Rest 0 ergibt, ist der größte gemeinsame Teiler der Ausgangszahlen.
:::

Für unsere Beispielzahlen ergibt sich daraus folgende Berechnung:

::: {.callout-tip}
## Berechnung des *ggT* nach dem modernen euklidischen Algorithmus
- $143\div 65=2, \quad\mathrm{Rest} \ 13$
- $65\div 13=5, \quad\mathrm{Rest } \ 0$
- $ggT(143, 65)=13$
:::

Wir brauchen also nur zwei Schritte zur Berechnung des *ggT* mit dem modernen Algorithmus, genauso wie für unser Beispiel aus der Primfaktorzerlegung:

::: {.callout-caution}
## Zwischenübung
Führe die Berechnung des *ggT* für die Werte 3780 und 3528 gemäß dem letzten Beispiel durch.
:::

::: {.callout-tip collapse="true"}
## Lösung
- $3780\div 3528=1, \quad\mathrm{Rest} \ 252$
- $3528\div 252=14, \quad\mathrm{Rest} \ 0$
- $ggT(3780, 3528)=252$
:::

Mit diesem Wissen können wir den modernen euklidischen Algorithmus in Python implementieren:

```{python}
def euklid_modern(a, b):
  zähler = 0
  while b != 0:           # <1>
    r = mod(a, b)         # <2>
    a = b                 # <3>
    b = r                 # <4>
    zähler += 1
  print(zähler)
  return a                # <5>
```
1. Beginn der Programmschleife mit Schleifenbedingung `b != 0`; die Schleife wird also ausgeführt, solange `b` nicht 0 ist.
2. Wir führen eine Division mit Rest aus und verwenden dafür unsere `mod()` Funktion aus @sec-division.
3. Dann machen wir den Divisor zum neuen Dividenden...
4. und den Rest der Division `r` zum neuen Divisor.
5. Eigentlich sollten wir den letzten Divisor `b` als Ergebnis ausgeben, wenn `mod(a, b)` gleich 0 ist.
Da dieser Test aber erst vor dem nächsten Schleifendurchlauf durchgeführt wird (1), wird im letzten Durchlauf nochmal `a = b` (2) und `b = r` (3) gesetzt.
Das führt dazu, dass nach Beendigung der Schleife `b` immer gleich 0 ist; wir müssen also `a` als letzten Divisor ausgeben.

```{python}
assert euklid_modern(143, 65) == 13
assert euklid_modern(3780, 3528) == 252
```

Aufgrund der Möglichkeit, in Python mehrere Zuweisungen gleichzeitig vorzunehmen, indem wir die Bezeichner und die zugewiesen Werte jeweils mit einem Komma trennen, hätten wir den kompletten Algorithmus der Zeilen (2) bis (4) auch in eine Zeile schreiben können:\
`a, b = b, mod(a, b)`.

Auch bei dieser Implementierung spielt die Reihenfolge der Argumente keine Rolle:

```{python}
assert euklid_modern(143, 65) == euklid_modern(65, 143)
```

Wir sehen aber, dass eine zusätzliche Operation notwendig wird, wenn das kleinere Argument zuerst kommt.
Das liegt daran, dass $65 \div 143$ gleich 0, mit Rest 65 ist, d.h. beim nächsten Schleifendurchlauf wird `mod(143, 65)` aufgerufen, die Variante mit dem größeren Argument zuerst.
Die zusätzliche Operation können wir aus Effizienzsicht gut verkraften, da wir uns ja den Test auf `b > a` sparen.

Der *ggT* wird häufig auch als *rekursive* Funktion realisiert.
Wir werden *Rekursion* in einer späteren Lektion ausführlich behandeln (siehe ???); ich möchte die Implementierung eines rekursiven *ggT* hier aber schon als kleinen Vorgeschmack vorstellen:

```{python}
def ggT(a, b):
  if b == 0:                    # <1>
    return a                    # <2>
  else:
    return ggT(b, mod(a, b))    # <3>
```
1. Abbruchbedingung: wenn `b` gleich 0 ist, dann wird die Rekursion gestoppt.
2. Wenn die Abbruchbedingung greift, geben wir `a` als Ergebnis der Berechnung aus, und der Programmablauf ist beendet.
3. Rekursiver Aufruf: die Funktion ruft sich selbst mit neuen Argumenten auf.
Die Argumente werden entsprechend dem Algorithmus gesetzt:
der Divisor wird zum neuen Dividenden und der Rest zum neuen Divisor.

```{python}
assert ggT(143, 65) == 13
assert ggT(3780, 3528) == 252
```

Die *rekursive* Implementierung kommt ohne zusätzliche Variablen aus, und wir benötigen auch keine explizite Schleife, da diese durch den rekursiven Aufruf ersetzt wird.
Das kann zu einem sehr übesichtlichen und eleganten Programm führen, dessen Bedeutung sich dem Leser sofort erschließt.
Viele erfahrene Programmierer bevorzugen daher eine rekursive Implementierung.

Auf der anderen Seite ist es nicht immer sofort ersichtlich, wie eine *iterative* Implementierung (d.h. eine Implementierung mit Schleifen) in eine rekursive Variante überführt werden kann.
Dazu bedarf es einiger Erfahrung; ich erwarte nicht, dass du jetzt bereits eigene rekursive Programme schreiben kannst.


## Kleinstes gemeinsames Vielfaches
### Das *kgV* von zwei Zahlen

Das **kleinste gemeinsame Vielfache** (*kgV*) zweier ganzer Zahlen $m$ und $n$ ist die kleinste positive natürliche Zahl, die sowohl Vielfaches von $m$ als auch Vielfaches von $n$ ist.
Zusätzlich wird für den Fall $m = 0$ oder $n = 0$ das *kgV* definiert als: $kgV ⁡(m, n) = 0$.

::: {.callout-tip}
## Berechnung des *kgV* von 12 und 18 über die Vielfachen
- Die Vielfachen von 12 sind: 12, 24, 36, 48, 60, 72, 84, 96, 108,... 
- Die Vielfachen von 18 sind: 18, 36, 54, 72, 90, 108, ...
- Die gemeinsamen Vielfachen von 12 und 18 sind also: 36, 72, 108, ...
- und das kleinste von diesen ist 36: $kgV(12, 18)=36$.
:::

Man kann das *kgV* über die Primfaktorzerlegung (siehe @sec-primfaktor) der beiden gegebenen Zahlen bestimmen.
Wir nehmen hierzu wieder das Beispiel aus @sec-division:

::: {.callout-tip}
## Primfaktozerlegung für 3528 und 3780
- $3528=2^3\cdot 3^2\cdot 7^2$
- $3780=2^2\cdot 3^3\cdot 5^1\cdot 7^1$
:::

Für das *kgV* nimmt man die Primfaktoren, die in mindestens einer der beiden Zerlegungen vorkommen, und als zugehörigen Exponenten den jeweils *größeren* der Ausgangsexponenten:

::: {.callout-tip}
## Kleinstes gemeinsames Vielfaches für 3528 und 7380
$kgV(3528, 3780)=2^3\cdot 3^3\cdot 5^1\cdot 7^2=52.920$
:::

```{python}
assert 2**3 * 3**3 * 5**1 * 7**2 == 52920
```

::: {.callout-caution}
## Zwischenübung
Bestimme das *kgV* von 60 und 24 über die Primfaktorzerlegung.
:::

::: {.callout-tip collapse="true"}
## Lösung
- $60=2^2\cdot 3^1\cdot 5^1$
- $24=2^3\cdot 3^1\cdot 5^0$
- $kgV(60, 24)=2^3\cdot 3^1\cdot 5^1=120$
:::


Man kann das *kgV* aber auch mit Hilfe des *ggT* berechnen; es gilt der folgende Grundsatz:

::: {.callout-important}
## Produkt von *ggT* und *kgV*
Das Produkt des *ggT* und des *kgV* zweier natürlicher Zahlen ist gleich dem Produkt beider Zahlen: 
$$
ggT(m, n) \cdot kgV(m, n) = m \cdot n
$$ {#eq-produkt}
:::

Wenn der *ggT* zweier Zahlen bekannt ist, dann kann man das *kgV* also wie folgt berechnen:

::: {.callout-important}
## Berechnung des *kgV* aus dem *ggT*
$$
kgV(m, n)=(m\cdot n)\div ggT(m, n)
$$ {#eq-kgV}
:::

Für die Zahlen 12 und 18 ergibt sich also folgende Berechnung:

::: {.callout-tip}
## Berechnung des *kgV* von 12 und 18 über den *ggT*
- $ggT(12, 18)=6$
- $kgV(12, 18)=(12\cdot 18)\div 6=12\cdot 3=36$
:::

::: {.callout-caution}
## Zwischenübung
Bestimme das *kgV* von 60 und 24 über den *ggT*.
:::

::: {.callout-tip collapse="true"}
## Lösung
- $ggT(60, 24)=12$
- $kgV(60, 24)=(60\cdot 24)\div 12=60\cdot 2=120$
:::

Da wir aus @sec-ggT bereits über eine Funktion zur Berechnung des *ggT* verfügen, ist die Implementierung des *kgV* in Python einfach:

```{python}
def kgv_2(m, n): return m * n // ggT(m, n)

assert kgv_2(12, 18) == 36
assert kgv_2(60, 24) == 120
assert kgv_2(3528, 3780) == 52920
```
### Das kgV von mehreren Zahlen

Man verwendet zur Berechnung des *kgV* mehrerer Zahlen alle Primfaktoren, die in mindestens einer der Zahlen vorkommen, mit der jeweils höchsten vorkommenden Potenz, zum Beispiel:

::: {.callout-tip}
## *kgV* der Zahlen 144, 160 und 175
- $144=2^4\cdot 3^2$
- $160=2^5\cdot 5^1$
- $175=5^2\cdot 7^1$
- $kgV(144, 160, 175)=2^5\cdot 3^2\cdot 5^2\cdot 7^1=50.400$
:::

```{python}
assert 2**5 * 3**2 * 5**2 * 7**1 == 50400
```

Wir könnten auch zunächst $kgV ⁡(144, 160)=1440$ berechnen und danach $kgV(1440, 175)= 50.400$, denn als eine zweistellige Verknüpfung auf den ganzen Zahlen ist das *kgV* assoziativ:

::: {.callout-important}
## Assoziativität des *kgV*
$$
kgv(m, kgV(n, p))=kgV(kgV(m, n), p)
$$ {#eq-kgv-assoz}
:::

Wir machen uns diesen Umstand zunütze und definieren eine neue Funktion in Python für die Berechnung des *kgV* für drei Zahlen:

```{python}
def kgv_3(m, n, p):                 # <1>
  kgv_mn = kgv_2(m, n)              # <2>
  return kgv_2(kgv_mn, p)           # <3>

assert kgv_3(144, 160, 175) == 50400
```
1. Signatur für die Funktion `kgv_3` mit drei Parametern
2. Berechnung des *kgV* für die ersten beiden Parameter
3. Berechnung und Rückgabe des *kgV* mit dem dritten Parameter

Python unterstützt nicht das Überladen von Funktionen.
Wenn wir zwei verschiedene Varianten einer Funktion definieren wollen (z.B. eine Variante, die zwei Argumente akzeptiert und eine Variante, die drei Argumente akzeptiert, wie in unserem Fall), dann müssen wir diesen Funktionen in Python verschiedene Namen geben.
Das ist der Grund, weshalb ich die Variante für zwei Argumente `kgv_2` genannt habe, und die Variante für drei Argumente `kgv_3`.

::: {.callout-note}
## Überladen von Funktionen
Einige *statisch kompilierte* Programmiersprachen (z.B. Java und C++) bieten die Möglichkeit, denselben Funtionsnamen für verwandte Funtionen zu verwenden.
Das nennt man dann **Überladen** der Funktion.

Die Signaturen der Funktionen müssen sich dann aber unterscheiden lassen: entweder durch die Anzahl der zugelassenen Parameter, oder dadurch, dass den Parametern unterschiedliche *Datentypen* zugeordnet werden.

Da Python aber eine *dynamische* Spache ist (d.h. eine Funktion wird erst dann kompiliert, wenn sie aufgerufen wird), und weil die Datentypen der Parameter zum Zeitpunkt der Kompilierung noch nicht bekannt sind, ist es in Python nicht möglich, Funktionen zu überladen.
:::

Wir können das Problem aber umgehen, indem wir einen zusätzlichen Standardparameter definieren und innerhalb der Funktion prüfen, ob dieser beim Aufruf der Funktion gesetzt wurde:

```{python}
def kgV(m, n, p=None):              # <1>
  if p:                             # <2>
    kgv_mn = kgV(m, n)              # <3>
    return kgV(kgv_mn, p)           # <3>
  else:
    return m * n // ggT(m, n)       # <4>

assert kgV(144, 160, 175) == 50400
```
1. Signatur der Funktion `kgV` mit drei Parameterm.
Der dritte Parameter `p` wird als Standardparameter definiert, indem wir ihm den Wert `None` zuweisen.
Wenn wir später die Funktion mit nur zwei Argumenten aufrufen, dann ist `p` undefiniert.
Wenn wir sie mit drei Argumenten aufrufen, dann ist `p` gleich dem dritten Argument.
2. Test, ob `p` gesetzt ist, d.h. ob drei Argumente angegeben wurden.
3. Falls ja, berechnen wir das Ergebnis so wie in `kgv_3`, nur dass wir eben wieder *kgV* mit zwei Argumenten aufrufen.
4. Falls `p` nicht gesetzt ist, berechnen wir das *kgV* wie in `kgv_2`.

Ob diese Lösung dann leichter verständlich ist, kannst für dich selbst entscheiden; grundsätzlich sind beide Varianten gleichwertig und führen zum selben Ergebnis.

## Übungen

In dieser Lektion hatten wir einige Zwischenübungen (insgesamt sechs in allen Kapiteln).
Wenn du sie alle alle gemacht und verstanden hast, dann bist du mit dieser Lektion fertig.
Wenn nicht, dann arbeite nochmal die gesamte Lektion durch versuche dich an den Übungen!