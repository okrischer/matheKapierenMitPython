---
title: "Grundlegende Rechenregeln"
jupyter: python3
---

Um mit Zahlen rechnen zu können, verknüpfen wir sie mit mathematischen *Operatoren*.
Ein Operator in diesem Sinn ist nichts anders als ein Symbol für die beabsichtigte Berechnung.
So werden zum Beispiel die vier Grundrechenarten Addition, Subtraktion, Multiplikation und Division durch die Operatoren $+, \ -, \ \cdot, \ \div$ ausgedrückt, während das Gleichheitszeichen ($=$) das Ergebnis der Berechnung angibt.

In diesem Kapitel werden wir untersuchen, wie wir verschiedene Operatoren miteinander verknüpfen können, um sinnvolle Ergebnisse für unsere Berechnungen zu erhalten.

## Buchstabenrechnen

Buchstabenrechnen ist das Rechnen mit unbestimmten Zahlen.
Wenn wir eine mathematische Aussage formulieren, die nicht nur für eine bestimmte Zahl, sondern für einen ganzen Zahlenbereich oder sogar für alle Zahlen gilt, dann benutzen wir statt einer Zahl einen Buchstaben.
Der Buchstabe heißt dann *Variable*.

Auch in Python können wir Variablen anlegen und ihnen gleichzeitig mit `=` einen Wert zuweisen.
Das Gleichheitszeichen in Python darf also nicht mit dem mathematischen Gleichheitszeichen verwechselt werden.
Wenn Variablen einmal angelegt sind, können wir mit ihnen wie mit Zahlen rechnen:

```{python}
a = 3                                         # <1>
b = 4                                         # <2>
c = a + b - 2                                 # <3>
# Die nächste Zeile gibt den Wert von c aus   # <4>
c
```
1. Zuweisung der Zahl 3 an die Variable `a`
2. Zuweisung der Zahl 4 an die Variable `b`
3. Berechnung von `a + b - 2` und Zuweisung des Ergebnisses an die Variable `c`
4. Eingaben, die nach dem `#` Zeichen erfolgen, werden als Kommentar gewertet.
Kommentare bleiben bei der Auswertung eines Programms in Python unberücksichtigt.

Wenn wir nun mehrere Berechnungen gleichzeitig durchführen wollen, dann verknüpfen wir Zahlen und Variablen mit den entsprechenden Operatoren und erhalten einen zusammengesetzten Ausdruck, den wir *Term* nennen.

::: {.callout-important}
## Term
Ein **Term** ist ein mathematischer Ausdruck, der aus Zahlen, Variablen, mathematischen Operatoren und möglicherweise noch anderen mathematischen Symbolen besteht.
:::

Diese Definition führt uns gleich zur nächsten:

::: {.callout-important}
## Gleichung
Will man ausdrücken, dass ein Term $T_1$ zu einem anderen Term $T_2$ gleichwertig ist, so schreibt man
$$
T_1 = T_2
$$
Eine solche Darstellung heißt **Gleichung**.
Die *linke* Seite der Gleichung ist $T_1$, die *rechte* Seite ist $T_2$.
:::

Wir sehen hier die wahre Bedeutung des Gleichheitszeichen in der Mathematik:
der Term auf der linken Seite von $=$ ist gleichbedeutend mit dem Term auf der rechten Seite.

In Python können wir auch Terme definieren; allerdings wertet Python solche Terme sofort aus, d.h. es wird das Ergebnis berechnet, wenn alle Variablen bekannt sind:

```{python}
T_1 = a * c + b * c - c
T_1
```

Bei der Auswertung geht die ursprüngliche Form des Terms $T_1 = a \cdot c + b \cdot c - c$ unwiederbringlich verloren, es bleibt nur das Ergebnis, in diesem Fall die Zahl $30$.
Aus diesem Grund ist Standard-Python nicht besonders gut für das Betreiben von Mathematik geeignet; seine Stärke liegt in der schnellen Berechnung von Ausdrücken, nicht in deren mathematischer Umformung.\
Wir werden in einer späteren Lektion (siehe ???) sehen, wie wir diese Beschränkung umgehen können, indem wir eine zusätzliche Bibliothek (engl. *library*) installieren.

Im letzten Code-Beispiel haben wir ein unbekanntes Zeichen `*` gesehen.
Das liegt daran, dass die Operatoren in Python nicht eins zu eins den mathematischen Operatoren entsprechen.
Die folgende Tabelle zeigt die Entsprechungen einiger mathematischer Operatoren mit denen in Python:

| Bedeutung            | mathematischer Operator | Python Operator |
|:---------------------|:-----------------------:|:---------------:|
| Addition             | $+$                     | `+`             |
| Subtraktion          | $-$                     | `-`             |
| Multiplikation       | $\cdot$                 | `*`             |
| Division             | $\div$                  | `/`             |
| ganzzahlige Division |                         | `//`            |
| Rest der Division    | $n \mod{m}$             | `n % m`         |
| Potenz               | $a^x$                   | `a**x`          |

## Teilbarkeitsregeln

Wir werden uns in der Lektion [Teiler und Vielfache](2-teiler.qmd) ausführlich mit der Teilbarkeit natürlicher Zahlen befassen.
An dieser Stelle wollen wir aber schon einige grundlegende Teilbarkeitsregeln betrachten.

Die einzelnen Zeichen einer Zahl sind ihre Ziffern: $0,1,2,3,4,5,6,7,8,9$.
Aus den Eigenschaften der Ziffern lassen sich Teilbarkeitseigenschaften der Zahlen ableiten:

::: {.callout-important}
## Teilbarkeitsregeln
Eine ganze Zahl ist teilbar durch

- 2, wenn die letzte Ziffer durch 2 teilbar ist
- 3, wenn die *Quersumme* der Zahl (also die Summe der Ziffern) durch 3 teilbar ist
- 4, wenn die Zahl aus den letzten beiden Ziffern durch 4 teilbar ist
- 5, wenn die letzte Ziffer durch 5 teilbar ist (also 0 oder 5 ist)
- 6, wenn die letzte Ziffer durch 2 und die Quersumme der Zahl durch 3 teilbar ist
- 8, wenn die Zahl aus den letzten 3 Ziffern durch 8 teilbar ist
- 9, wenn die Quersumme der Zahl durch 9 teilbar ist
- 11, wenn die alternierende Quersumme der Zahl (also die Summe der Ziffern, die abwechselnd positives und negatives Vozeichen erhalten) durch 11 teilbar ist.
:::

::: {.callout-tip}
## Beispiele für Teilbarkeit
- 2486 ist teilbar durch 2, denn 6 ist teilbar durch 2
- 263.451 ist teilbar durch 3, denn die Quersumme $2+6+3+4+5+1=21$ ist teilbar druch 3
- 2.563.488 ist teilbar durch 4, denn 88 ist teilbar durch 4 ($22\cdot4=88$)
- 823.620 ist teilbar durch 5, denn die letzte Ziffer ist 0
- 2.598.018 ist teilbar durch 6, denn 8 ist teilbar durch 2 und die Quersumme $2+5+9+8+0+1+8=33$ ist teilbar durch 3
- 524.299.168 ist teilbar durch 8, denn 168 ist teilbar durch 8 ($21\cdot8=168$)
- 11.929.545 ist teilbar durch 9, denn die Quersumme $1+1+9+2+9+5+4+5=36$ ist teilbar durch 9 ($4\cdot9=36$)
- 14.739.296 ist teilbar durch 11, denn die alternierende Quersumme $+1-4+7-3+9-2+9-6=11$ ist teilbar durch 11
:::


## Grundgesetze der Addition und Multiplikation

Wenn wir einen Term betrachten, wie z.B. im letzten Code-Beispiel $T_1=a \cdot c + b \cdot c - c$, dann ist nicht sofort offensichtlich, wie wir das Ergebnis am besten berechnen.
In diesem Abschnitt wollen wir erkunden, wie wir solche komplexe Ausdrücke vereinfachen können, um uns Rechenarbeit zu ersparen.

Ein erstes Beispiel in Python:

```{python}
T_2 = c*(a+b-1)
assert T_1 == T_2
```

Wir sehen hier eine neue Anweisung `assert`, deren Bedeutung so zu verstehen ist:

::: {.callout-note}
## Gleichheit mit `assert`
Die `assert` Anweisung in Python prüft, ob der nachfolgend angegebene Ausdruck wahr ist.
Um zwei Werte auf Gleichheit zu überprüfen, verwenden wir in Python das doppeltes Gleichheitsyeichen `==`, das einen Wahrheitswert `True` oder `False` zurückliefert.\
Wenn der Wahrheitswert `True` ist, dann passiert beim Aufruf von `assert` gar nichts, anderenfalls wird ein Fehler ausgegeben.
:::

Offensichtlich gilt also die Gleichung $T_1=T_2$ und damit $a \cdot c + b \cdot c - c = c \cdot(a+b-1)$, zumindest für die gegebenen Werte von $a, b$ und $c$.
Wir wollen in der Mathematik aber zeigen, dass die Gleichung für alle möglichen Werte von $a, b$ und $c$ gilt.
Deshalb brauchen wir Rechengesetze, die eine äquivalente Umformung eines Ausdrucks in einen anderen Ausdruck ermöglichen, d.h. eine Umformung, die die Bedeutung (oder den Wert) eines Ausdrucks nicht verändert.

::: {.callout-important}
## Kommutativgesetz
Für reelle Zahlen gilt bezüglich der Addition und Multiplikation das Kommutativgesetz:
$$
\begin{align}
a + b &= b + a\\
a \cdot b &= b \cdot a
\end{align}
$$ {#eq-kommutativ}
Bei der Addition kann man also die *Summanden* vertauschen und bei der Multiplikation die *Faktoren*.
:::

```{python}
assert a + b == b + a
assert a * b == b * a
```

::: {.callout-important}
## Assoziativgestz
Für reelle Zahlen gilt bezüglich der Addition und Multiplikation das Assoziativgesetz:
$$
\begin{align}
(a + b) + c &= a + (b + c)\\
(a \cdot b) \cdot c &= a \cdot (b \cdot c)
\end{align}
$$ {#eq-assoziativ}
Bei der Addition kann man also die Summanden beliebig zusammenfassen, bei der Multiplikation die Faktoren beliebig verknüpfen.
:::

```{python}
assert (a + b) + c == a + (b + c)
assert (a * b) * c == a * (b * c)
```

::: {.callout-important}
## Distributivgesetze
Für reelle Zahlen gelten die Distributivgesetze:
$$
\begin{align}
(a + b) \cdot c &= a \cdot c + b \cdot c\\
a \cdot (b + c) \cdot c &= a \cdot b + a \cdot c\\
\end{align}
$$ {#eq-distributiv}
:::

```{python}
assert (a + b) * c == a*c + b*c
assert a * (b + c) == a*b + a*c
```

::: {.callout-note}
## Punktrechnung vor Strichrechnung
Die Rechenzeichen $\cdot$ und $\div$ binden stärker als $+$ und $-$, das heißt, Multiplikation und Division müssen vor Addition und Subtraktion ausgeführt werden.
$$
\begin{align}
a + b \cdot c &= a + (b \cdot c)\\
a - b \div c &= a - (b \div c)
\end{align}
$$
Python berücksichtigt diese Regeln automatisch, so dass wir im letzten Codebeispiel die Klammern auf der rechten Seite weglassen konnten.
:::

## Grundregeln der Klammerrechnung

Aus den Grundgesetzen der Addition und Multiplikation ergeben sich die wichtigen Regeln der Klammerrechnung, die wir in diesem Abschnitt untersuchen wollen.
Zuvor aber noch einen Hinweis für die mathematische Schreibweise von Produkten:

::: {.callout-note}
## Schreibweise von Produkten
Beim Aufschreiben von Produkten in der Form $a \cdot b$ lassen wir oft den Operator für die Multiplikation weg.
Das heißt, $a \cdot b$ ist gleichbedeutend mit $ab$.\
Das gilt aber nicht für Python-Code: hier muss ein Produkt immer in der Form `a * b` angegeben werden; die Leerzeichen können aber auch weggelassen werden: `a*b`.
:::

Außerdem ist noch eine Warnung angebracht: das Distributivgestz (@eq-distributiv) gilt nicht für die reine Multiplikation:

::: {.callout-warning}
$$
(a\cdot b)\cdot c\neq ac\cdot bc, \ \mathrm{sondern} \ (a\cdot b)\cdot c=abc
$$
:::

```{python}
assert (a*b)*c == a*b*c
(a*b) * c == a*c * b*c
```

### Multiplikation mit Klammern

Summen und Differenzen von Produkten können vereinfacht werden, indem man gemeinsame Faktoren *ausklammert*.

::: {.callout-important}
## Ausklammern
Enthalten alle Glieder einer Summe oder Differenz den gleichen Faktor so kann man diesen ausklammern:
$$
\begin{align}
ab + ac &= a(b+c)\\
ac - bc &= (a-b)c
\end{align}
$$
:::

Produkte von Summen und Differenzen werden berechnet, indem man ihre Glieder multipliziert.

::: {.callout-important}
## Ausmultiplizieren
Man multipliziert zwei Summen (bzw. Differenzen) miteinander, indem man jedes Glied der einen Summe mit jedem Glied der anderen Summe multipliziert und die erhaltenen Produkte addiert (bzw. subtrahiert):
$$
\begin{align}
(a+b)(c+d) &= ac+ad+bc+bd\\
(a+b)(c-d) &= ac-ad+bc-bd\\
(a-b)(c+d) &= ac+ad-bc-bd\\
(a-b)(c-d) &= ac-ad-bc+bd
\end{align}
$$
:::

Die grundsätzlich Bedeutung von Klammern ist, dass Teilausdrücke, die innerhalb einer Klammer stehen, vor allen anderen Operationen ausgewertet werden.
Bei verschachtelten Klammern sind die Klammern immer von innen nach außen aufzulösen:

$$
a(b+c(d+e))=a(b+cd+ce)=ab+acd+ace
$$

### Binomische Formeln {#sec-binom}

Ein *Binom* ist ein zweigliedriger Ausdruck in der Form $a+b$ oder $a-b$.
Die Multiplikation von Binomen führt zu den **Binomischen Formeln** (mit zwei Faktoren).
Sie heißen daher auch *binomische Gleichungen 2. Grades*.

Bevor wir uns diese Gleichungen anschauen, wollen wir erst den Begiff der Quadratzahl einführen:

::: {.callout-note}
## Quadratzahl
Eine reelle Zahl $a$, multipliziert mit sich selbst, heißt **Quadratzahl** von $a$ (gesprochen *a Quadrat*):
$$
a \cdot a = a^2
$$
:::

::: {.callout-important}
## Binomische Formeln
Die binomischen Formeln für zwei beliebige reelle Zahlen lauten:
$$
\begin{align}
(a+b)^2 &= a^2+2ab+b^2\\
(a-b)^2 &= a^2-2ab+b^2\\
(a+b)(a-b) &= a^2-b^2
\end{align}
$$ {#eq-binom}
:::

```{python}
assert (a+b)**2 == a**2 + 2*a*b + b**2
assert (a-b)**2 == a**2 - 2*a*b + b**2
assert (a+b)*(a-b) == a**2 - b**2
```

Diese Formeln sind keine Hexerei, sondern können mit den jetzt bekannten Rechenregeln hergeleitet werden.
Für die erste binomische Formel könnte das so aussehen:
$$
(a+b)^2=(a+b)(a+b)=aa+ab+ba+bb=a^2+2ab+b^2
$$

::: {.callout-warning}
$$
(a+b)^2 \neq a^2+b^2, \ \mathrm{sondern} \ (a+b)^2=a^2+2ab+b^2
$$
:::

```{python}
(a+b)**2 == a**2 + b**2
```

## Indizes und Summenzeichen

Ein Index (Plural Indizes) ist ein Zeichen, das an Symbole für Variable, Funktionen oder Operationen angebracht wird.
Bezeichnet man z.B. Variable mit $x$, dann kennzeichent man verschiedene Variable dudurch, dass man an das $x$ verschiedene tiefgestellte Indizes anhängt: $x_1, x_2, x_3, \dots$

Das Summenzeichen, (entstanden aus dem griechischen Buchstaben für S) dient zur vereinfachten Darstellung von Summen:

::: {.callout-important}
## Summenzeichen
$$
\sum_{k=1}^n = a_k=a_1+a_2+a_3+\cdots+a_n,
$$ {#eq-summe}
gespochen als: Summe über $a_k$ von $k=1$ bis $k=n$.
:::

Man erhält alle Summanden der Summe, wenn man in $a_k$ für den Index $k$ zunächst 1, dann 2 usw. und schließlich $n$ setzt.
Dieser Buchstabe $k$ heißt Summationsindex und kann durch einen beleibigen anderen Buchstaben ersetzt werden.

::: {.callout-tip}
## Beispiel für Summen
$\sum_{k=1}^6 k^2= 1^2+2^2+3^2+4^2+5^2+6^2=1+4+9+16+25+36=91$
:::

In Python können wir Summen auf verschiedene Weisen berechnen:

```{python}
# manuelles Addieren
sum_1 = 1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2
assert sum_1 == 91

# Addieren in einer for-Schleife
sum_2 = 0
ks = [1,2,3,4,5,6]                  # <1>
for s in ks:                        # <2>
  sum_2 += s**2                     # <3>

## Addieren über den Index
sum_3 = 0
for i in range(len(ks)):            # <4>
  sum_3 += ks[i]**2                 # <5>

assert sum_1 == sum_2 == sum_3
```
1. Definition der Werte für den Summationsindex $k$ als Python Liste.
Zur Erstellung einer Liste geben wir die Werte, getrennt durch ein Komma, in eckigen Klammern an.
Das Ergebis dieser Definition ist Objekt des Datentyps `list`.
2. Beginn einer `for` Schleife mit `s` als Schleifenvariable und dem Objekt `ks`.
Diese Anweisung führt dazu, dass die nächste Code-Zeile (3) für jedes Element in `ks` einmal ausgeführt wird.
3. Der Wert von `sum_2` wird um das Quadrat des jeweiligen Elements `s` erhöht.
4. Python erzeugt automatisch einen Index für jedes `list` Objekt.
Wir können mit dem Ausdruck `range(len(ks))` eine neue Liste dieser Indizes erzeugen.
Die Indizes in Python beginnen, abweichend von der mathematischen Definition, mit 0 und enden demgemäß mit $n-1$, in unserem Beispiel mit 5.
Wir werden in der Lektion [Zahlenbereiche und Zahlensyteme](3-mengen.qmd) sehen, wie wir die Funktion `range()` korrekt anwenden.
5. Auf das $i$-te Element einer Liste kann mit `list[i]` zugegriffen werden.
Der Ausdruck `ks[i]` ist also synonym zum Ausdruck `s` im vorangehenden Code-Beispiel.

## Übungen {#sec-ubung}

Wir werden in dieser Lektion ein paar einfache Rechenübungen durchführen, bevor wir dann ab der nächsten Lektion mit [Jupyter Notebooks](https://jupyter.org/) arbeiten werden.
Deine erste Aufgabe besteht also darin, dir eine entsprechende Arbeitsumgebung einzurichten.
Falls du noch kein Python auf deinem Rechner hast, empfehle ich dir, zuerst *Miniconda* entsprechend diesen [Anleitungen](https://docs.anaconda.com/miniconda/miniconda-install/) zu installieren.
Wenn das geschafft ist, dann kannst du mit einem Befehl wie
```shell
conda create -n matheKapieren python=3.12
```
in deiner Kommandozeile eine neue Arbeitsumgebung einrichten und Python installieren.
Um die Arbeitsumgebung zu aktivieren, setze den Befehl `conda activate matheKapieren` ab, dann kannst du auf alle Python Werkzeuge zugreifen.
Schließlich kannstdu mit `conda install -c conda-forge jupyter` Jupyter und später noch weitere Pakete installieren.

Nun aber zu den Übungen:
wenn du bei einer Aufgabe Schwierigkeiten hast, schau dir den entsprechenden Lösungshinweis an, und vergleiche dann deine Lösung mit meinem Lösungsvorschlag.
Mache dir aber auf jeden Fall Gedanken, wie du die Aufgabe lösen kannst.
Wenn du gleich zur Lösung springst, wirst du *nichts* lernen.

::: {.callout-caution}
## Aufgabe 1
Berechne die Quersumme von $1.234.567.890$.
:::

::: {.callout-tip collapse="true"}
## Hinweis
Die Quersumme einer Zahl ist die Summe ihrer Ziffern.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
1+2+3+4+5+6+7+8+9+0=45
$$
:::

::: {.callout-caution}
## Aufgabe 2
Leite die 2. binomische Formel her.
:::

::: {.callout-tip collapse="true"}
## Hinweis
Gehe genauso vor wie bei der Herleitung der 1. binomischen Formel in @sec-binom.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
(a-b)^2=(a-b)(a-b)=aa-ab-ba+bb=a^2-2ab+b^2
$$
:::

::: {.callout-caution}
## Aufgabe 3
Leite die 3. binomische Formel her.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
(a+b)(a-b)=aa-ab+ba-bb=aa-bb=a^2-b^2
$$
:::

::: {.callout-caution}
## Aufgabe 4
Berechne $3(200+7)$.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
3(200+7)=3\cdot 200+3\cdot 7= 600+21=621
$$
:::

::: {.callout-caution}
## Aufgabe 5
Vereinfache den Term: $abc-acd+ace$.
:::

::: {.callout-tip collapse="true"}
## Hinweis
Klammere die gemeinsamen Faktoren aus.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
abc-acd+ace=ac(b-d+e)
$$
:::

::: {.callout-caution}
## Aufgabe 6
Vereinfache den Term: $-5x^2+25xy-35zx$.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
-5x^2+25xy-35zx=-5x(x-5y+7z)
$$
:::

::: {.callout-caution}
## Aufgabe 7
Ist 11.543.711 durch 11 teilbar?
:::

::: {.callout-tip collapse="true"}
## Hinweis
Verwende die alternierende Quersumme.
:::

::: {.callout-tip collapse="true"}
## Lösung
11.513.511 ist nicht durch 11 teilbar, denn die alternierende Quersumme $+1-1+5-1+3-5+1-1=2$ ist nicht teilbar durch 11.
:::

::: {.callout-caution}
## Aufgabe 8
Berechne $21^2$.
:::

::: {.callout-tip collapse="true"}
## Hinweis
Versuche, die 1. binomische Formel anzuwenden.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
21^2=(20+1)^2=20^2+2\cdot 20\cdot 1+1^2=400+40+1=441
$$
:::

::: {.callout-caution}
## Aufgabe 9
Berechne $19^2$.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
19^2=(20-1)^2=20^2-2\cdot 20\cdot 1+1^2=400-40+1=361
$$
:::

::: {.callout-caution}
## Aufgabe 10
Vereinfache den Term: $5(x-2(x-y-3y-6x-3y)+2y)$.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
\begin{align}
5(x-2(x-y-3y-6x-3y)+2y) &= 5(x-2(-5x-7y)+2y)\\
&=5(x+10x+14y+2y)\\
&=5(11x+16y)\\
&=55x+80y
\end{align}
$$
:::

::: {.callout-caution}
## Aufgabe 11
Berechne $21\cdot 19$.
:::

::: {.callout-tip collapse="true"}
## Hinweis
Versuche, die 3. binomische Formel anzuwenden.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
21 \cdot 19=(20+1)(20-1)=20^2-1^2=400-1=399
$$
:::

::: {.callout-caution}
## Aufgabe 12
Berechne $17\cdot 23$.
:::

::: {.callout-tip collapse="true"}
## Lösung
$$
17 \cdot 23=(20-3)(20+3)=20^2-3^2=400-9=391
$$
:::
