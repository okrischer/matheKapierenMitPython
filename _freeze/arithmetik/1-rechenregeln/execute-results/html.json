{
  "hash": "ddbf6e9186501f1167e34aaa9fa10155",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Grundlegende Rechenregeln\n---\n\nUm mit Zahlen rechnen zu können, verknüpfen wir sie mit mathematischen *Operatoren*.\nEin Operator in diesem Sinn ist nichts anders als ein Symbol für die beabsichtigte Berechnung.\nSo werden zum Beispiel die vier Grundrechenarten Addition, Subtraktion, Multiplikation und Division durch die Operatoren $+, \\ -, \\ \\cdot, \\ \\div$ ausgedrückt, während das Gleichheitszeichen ($=$) das Ergebnis der Berechnung angibt.\n\nIn diesem Kapitel werden wir untersuchen, wie wir verschiedene Operatoren miteinander verknüpfen können, um sinnvolle Ergebnisse für unsere Berechnungen zu erhalten.\n\n## Buchstabenrechnen\n\nBuchstabenrechnen ist das Rechnen mit unbestimmten Zahlen.\nWenn wir eine mathematische Aussage formulieren, die nicht nur für eine bestimmte Zahl, sondern für einen ganzen Zahlenbereich oder sogar für alle Zahlen gilt, dann benutzen wir statt einer Zahl einen Buchstaben.\nDer Buchstabe heißt dann *Variable*.\n\nAuch in Python können wir Variablen anlegen und ihnen gleichzeitig mit `=` einen Wert zuweisen.\nDas Gleichheitszeichen in Python darf also nicht mit dem mathematischen Gleichheitszeichen verwechselt werden.\nWenn Variablen einmal angelegt sind, können wir mit ihnen wie mit Zahlen rechnen:\n\n::: {#888ac7d4 .cell execution_count=1}\n``` {.python .cell-code}\na = 3                                         # <1>\nb = 4                                         # <2>\nc = a + b - 2                                 # <3>\n# Die nächste Zeile gibt den Wert von c aus   # <4>\nc\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n5\n```\n:::\n:::\n\n\n1. Zuweisung der Zahl 3 an die Variable `a`\n2. Zuweisung der Zahl 4 an die Variable `b`\n3. Berechnung von `a + b - 2` und Zuweisung des Ergebnisses an die Variable `c`\n4. Eingaben, die nach dem `#` Zeichen erfolgen, werden als Kommentar gewertet.\nKommentare bleiben bei der Auswertung eines Programms in Python unberücksichtigt.\n\nWenn wir nun mehrere Berechnungen gleichzeitig durchführen wollen, dann verknüpfen wir Zahlen und Variablen mit den entsprechenden Operatoren und erhalten einen zusammengesetzten Ausdruck, den wir *Term* nennen.\n\n::: {.callout-important}\n## Term\nEin **Term** ist ein mathematischer Ausdruck, der aus Zahlen, Variablen, mathematischen Operatoren und möglicherweise noch anderen mathematischen Symbolen besteht.\n:::\n\nDiese Definition führt uns gleich zur nächsten:\n\n::: {.callout-important}\n## Gleichung\nWill man ausdrücken, dass ein Term $T_1$ zu einem anderen Term $T_2$ gleichwertig ist, so schreibt man\n$$\nT_1 = T_2\n$$\nEine solche Darstellung heißt **Gleichung**.\nDie *linke* Seite der Gleichung ist $T_1$, die *rechte* Seite ist $T_2$.\n:::\n\nWir sehen hier die wahre Bedeutung des Gleichheitszeichen in der Mathematik:\nder Term auf der linken Seite von $=$ ist gleichbedeutend mit dem Term auf der rechten Seite.\n\nIn Python können wir auch Terme definieren; allerdings wertet Python solche Terme sofort aus, d.h. es wird das Ergebnis berechnet, wenn alle Variablen bekannt sind:\n\n::: {#b9d31adc .cell execution_count=2}\n``` {.python .cell-code}\nT_1 = a * c + b * c - c\nT_1\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n30\n```\n:::\n:::\n\n\nBei der Auswertung geht die ursprüngliche Form des Terms $T_1 = a \\cdot c + b \\cdot c - c$ unwiederbringlich verloren, es bleibt nur das Ergebnis, in diesem Fall die Zahl $30$.\nAus diesem Grund ist Standard-Python nicht besonders gut für das Betreiben von Mathematik geeignet; seine Stärke liegt in der schnellen Berechnung von Ausdrücken, nicht in deren mathematischer Umformung.\\\nWir werden in einer späteren Lektion (siehe ???) sehen, wie wir diese Beschränkung umgehen können, indem wir eine zusätzliche Bibliothek (engl. *library*) installieren.\n\nIm letzten Code-Beispiel haben wir ein unbekanntes Zeichen `*` gesehen.\nDas liegt daran, dass die Operatoren in Python nicht eins zu eins den mathematischen Operatoren entsprechen.\nDie folgende Tabelle zeigt die Entsprechungen einiger mathematischer Operatoren mit denen in Python:\n\n| Bedeutung            | mathematischer Operator | Python Operator |\n|:---------------------|:-----------------------:|:---------------:|\n| Addition             | $+$                     | `+`             |\n| Subtraktion          | $-$                     | `-`             |\n| Multiplikation       | $\\cdot$                 | `*`             |\n| Division             | $\\div$                  | `/`             |\n| ganzzahlige Division |                         | `//`            |\n| Rest der Division    | $n \\mod{m}$             | `n % m`         |\n| Potenz               | $a^x$                   | `a**x`          |\n\n## Teilbarkeitsregeln\n\nWir werden uns in der Lektion [Teiler und Vielfache](2-teiler.qmd) ausführlich mit der Teilbarkeit natürlicher Zahlen befassen.\nAn dieser Stelle wollen wir aber schon einige grundlegende Teilbarkeitsregeln betrachten.\n\nDie einzelnen Zeichen einer Zahl sind ihre Ziffern: $0,1,2,3,4,5,6,7,8,9$.\nAus den Eigenschaften der Ziffern lassen sich Teilbarkeitseigenschaften der Zahlen ableiten:\n\n::: {.callout-important}\n## Teilbarkeitsregeln\nEine ganze Zahl ist teilbar durch\n\n- 2, wenn die letzte Ziffer durch 2 teilbar ist\n- 3, wenn die *Quersumme* der Zahl (also die Summe der Ziffern) durch 3 teilbar ist\n- 4, wenn die Zahl aus den letzten beiden Ziffern durch 4 teilbar ist\n- 5, wenn die letzte Ziffer durch 5 teilbar ist (also 0 oder 5 ist)\n- 6, wenn die letzte Ziffer durch 2 und die Quersumme der Zahl durch 3 teilbar ist\n- 8, wenn die Zahl aus den letzten 3 Ziffern durch 8 teilbar ist\n- 9, wenn die Quersumme der Zahl durch 9 teilbar ist\n- 11, wenn die alternierende Quersumme der Zahl (also die Summe der Ziffern, die abwechselnd positives und negatives Vozeichen erhalten) durch 11 teilbar ist.\n:::\n\n::: {.callout-tip}\n## Beispiele für Teilbarkeit\n- 2486 ist teilbar durch 2, denn 6 ist teilbar durch 2\n- 263.451 ist teilbar durch 3, denn die Quersumme $2+6+3+4+5+1=21$ ist teilbar druch 3\n- 2.563.488 ist teilbar durch 4, denn 88 ist teilbar durch 4 ($22\\cdot4=88$)\n- 823.620 ist teilbar durch 5, denn die letzte Ziffer ist 0\n- 2.598.018 ist teilbar durch 6, denn 8 ist teilbar durch 2 und die Quersumme $2+5+9+8+0+1+8=33$ ist teilbar durch 3\n- 524.299.168 ist teilbar durch 8, denn 168 ist teilbar durch 8 ($21\\cdot8=168$)\n- 11.929.545 ist teilbar durch 9, denn die Quersumme $1+1+9+2+9+5+4+5=36$ ist teilbar durch 9 ($4\\cdot9=36$)\n- 14.739.296 ist teilbar durch 11, denn die alternierende Quersumme $+1-4+7-3+9-2+9-6=11$ ist teilbar durch 11\n:::\n\n\n## Grundgesetze der Addition und Multiplikation\n\nWenn wir einen Term betrachten, wie z.B. im letzten Code-Beispiel $T_1=a \\cdot c + b \\cdot c - c$, dann ist nicht sofort offensichtlich, wie wir das Ergebnis am besten berechnen.\nIn diesem Abschnitt wollen wir erkunden, wie wir solche komplexe Ausdrücke vereinfachen können, um uns Rechenarbeit zu ersparen.\n\nEin erstes Beispiel in Python:\n\n::: {#67dcb16e .cell execution_count=3}\n``` {.python .cell-code}\nT_2 = c*(a+b-1)\nassert T_1 == T_2\n```\n:::\n\n\nWir sehen hier eine neue Anweisung `assert`, deren Bedeutung so zu verstehen ist:\n\n::: {.callout-note}\n## Gleichheit mit `assert`\nDie `assert` Anweisung in Python prüft, ob der nachfolgend angegebene Ausdruck wahr ist.\nUm zwei Werte auf Gleichheit zu überprüfen, verwenden wir in Python das doppeltes Gleichheitsyeichen `==`, das einen Wahrheitswert `True` oder `False` zurückliefert.\\\nWenn der Wahrheitswert `True` ist, dann passiert beim Aufruf von `assert` gar nichts, anderenfalls wird ein Fehler ausgegeben.\n:::\n\nOffensichtlich gilt also die Gleichung $T_1=T_2$ und damit $a \\cdot c + b \\cdot c - c = c \\cdot(a+b-1)$, zumindest für die gegebenen Werte von $a, b$ und $c$.\nWir wollen in der Mathematik aber zeigen, dass die Gleichung für alle möglichen Werte von $a, b$ und $c$ gilt.\nDeshalb brauchen wir Rechengesetze, die eine äquivalente Umformung eines Ausdrucks in einen anderen Ausdruck ermöglichen, d.h. eine Umformung, die die Bedeutung (oder den Wert) eines Ausdrucks nicht verändert.\n\n::: {.callout-important}\n## Kommutativgesetz\nFür reelle Zahlen gilt bezüglich der Addition und Multiplikation das Kommutativgesetz:\n$$\n\\begin{align}\na + b &= b + a\\\\\na \\cdot b &= b \\cdot a\n\\end{align}\n$$ {#eq-kommutativ}\nBei der Addition kann man also die *Summanden* vertauschen und bei der Multiplikation die *Faktoren*.\n:::\n\n::: {#ab5c7d78 .cell execution_count=4}\n``` {.python .cell-code}\nassert a + b == b + a\nassert a * b == b * a\n```\n:::\n\n\n::: {.callout-important}\n## Assoziativgestz\nFür reelle Zahlen gilt bezüglich der Addition und Multiplikation das Assoziativgesetz:\n$$\n\\begin{align}\n(a + b) + c &= a + (b + c)\\\\\n(a \\cdot b) \\cdot c &= a \\cdot (b \\cdot c)\n\\end{align}\n$$ {#eq-assoziativ}\nBei der Addition kann man also die Summanden beliebig zusammenfassen, bei der Multiplikation die Faktoren beliebig verknüpfen.\n:::\n\n::: {#ff170bc3 .cell execution_count=5}\n``` {.python .cell-code}\nassert (a + b) + c == a + (b + c)\nassert (a * b) * c == a * (b * c)\n```\n:::\n\n\n::: {.callout-important}\n## Distributivgesetze\nFür reelle Zahlen gelten die Distributivgesetze:\n$$\n\\begin{align}\n(a + b) \\cdot c &= a \\cdot c + b \\cdot c\\\\\na \\cdot (b + c) \\cdot c &= a \\cdot b + a \\cdot c\\\\\n\\end{align}\n$$ {#eq-distributiv}\n:::\n\n::: {#4d21e910 .cell execution_count=6}\n``` {.python .cell-code}\nassert (a + b) * c == a*c + b*c\nassert a * (b + c) == a*b + a*c\n```\n:::\n\n\n::: {.callout-note}\n## Punktrechnung vor Strichrechnung\nDie Rechenzeichen $\\cdot$ und $\\div$ binden stärker als $+$ und $-$, das heißt, Multiplikation und Division müssen vor Addition und Subtraktion ausgeführt werden.\n$$\n\\begin{align}\na + b \\cdot c &= a + (b \\cdot c)\\\\\na - b \\div c &= a - (b \\div c)\n\\end{align}\n$$\nPython berücksichtigt diese Regeln automatisch, so dass wir im letzten Codebeispiel die Klammern auf der rechten Seite weglassen konnten.\n:::\n\n## Grundregeln der Klammerrechnung\n\nAus den Grundgesetzen der Addition und Multiplikation ergeben sich die wichtigen Regeln der Klammerrechnung, die wir in diesem Abschnitt untersuchen wollen.\nZuvor aber noch einen Hinweis für die mathematische Schreibweise von Produkten:\n\n::: {.callout-note}\n## Schreibweise von Produkten\nBeim Aufschreiben von Produkten in der Form $a \\cdot b$ lassen wir oft den Operator für die Multiplikation weg.\nDas heißt, $a \\cdot b$ ist gleichbedeutend mit $ab$.\\\nDas gilt aber nicht für Python-Code: hier muss ein Produkt immer in der Form `a * b` angegeben werden; die Leerzeichen können aber auch weggelassen werden: `a*b`.\n:::\n\nAußerdem ist noch eine Warnung angebracht: das Distributivgestz (@eq-distributiv) gilt nicht für die reine Multiplikation:\n\n::: {.callout-warning}\n$$\n(a\\cdot b)\\cdot c\\neq ac\\cdot bc, \\ \\mathrm{sondern} \\ (a\\cdot b)\\cdot c=abc\n$$\n:::\n\n::: {#62bd36ca .cell execution_count=7}\n``` {.python .cell-code}\nassert (a*b)*c == a*b*c\n(a*b) * c == a*c * b*c\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nFalse\n```\n:::\n:::\n\n\n### Multiplikation mit Klammern\n\nSummen und Differenzen von Produkten können vereinfacht werden, indem man gemeinsame Faktoren *ausklammert*.\n\n::: {.callout-important}\n## Ausklammern\nEnthalten alle Glieder einer Summe oder Differenz den gleichen Faktor so kann man diesen ausklammern:\n$$\n\\begin{align}\nab + ac &= a(b+c)\\\\\nac - bc &= (a-b)c\n\\end{align}\n$$\n:::\n\nProdukte von Summen und Differenzen werden berechnet, indem man ihre Glieder multipliziert.\n\n::: {.callout-important}\n## Ausmultiplizieren\nMan multipliziert zwei Summen (bzw. Differenzen) miteinander, indem man jedes Glied der einen Summe mit jedem Glied der anderen Summe multipliziert und die erhaltenen Produkte addiert (bzw. subtrahiert):\n$$\n\\begin{align}\n(a+b)(c+d) &= ac+ad+bc+bd\\\\\n(a+b)(c-d) &= ac-ad+bc-bd\\\\\n(a-b)(c+d) &= ac+ad-bc-bd\\\\\n(a-b)(c-d) &= ac-ad-bc+bd\n\\end{align}\n$$\n:::\n\nDie grundsätzlich Bedeutung von Klammern ist, dass Teilausdrücke, die innerhalb einer Klammer stehen, vor allen anderen Operationen ausgewertet werden.\nBei verschachtelten Klammern sind die Klammern immer von innen nach außen aufzulösen:\n\n$$\na(b+c(d+e))=a(b+cd+ce)=ab+acd+ace\n$$\n\n### Binomische Formeln {#sec-binom}\n\nEin *Binom* ist ein zweigliedriger Ausdruck in der Form $a+b$ oder $a-b$.\nDie Multiplikation von Binomen führt zu den **Binomischen Formeln** (mit zwei Faktoren).\nSie heißen daher auch *binomische Gleichungen 2. Grades*.\n\nBevor wir uns diese Gleichungen anschauen, wollen wir erst den Begiff der Quadratzahl einführen:\n\n::: {.callout-note}\n## Quadratzahl\nEine reelle Zahl $a$, multipliziert mit sich selbst, heißt **Quadratzahl** von $a$ (gesprochen *a Quadrat*):\n$$\na \\cdot a = a^2\n$$\n:::\n\n::: {.callout-important}\n## Binomische Formeln\nDie binomischen Formeln für zwei beliebige reelle Zahlen lauten:\n$$\n\\begin{align}\n(a+b)^2 &= a^2+2ab+b^2\\\\\n(a-b)^2 &= a^2-2ab+b^2\\\\\n(a+b)(a-b) &= a^2-b^2\n\\end{align}\n$$ {#eq-binom}\n:::\n\n::: {#04b16a3c .cell execution_count=8}\n``` {.python .cell-code}\nassert (a+b)**2 == a**2 + 2*a*b + b**2\nassert (a-b)**2 == a**2 - 2*a*b + b**2\nassert (a+b)*(a-b) == a**2 - b**2\n```\n:::\n\n\nDiese Formeln sind keine Hexerei, sondern können mit den jetzt bekannten Rechenregeln hergeleitet werden.\nFür die erste binomische Formel könnte das so aussehen:\n$$\n(a+b)^2=(a+b)(a+b)=aa+ab+ba+bb=a^2+2ab+b^2\n$$\n\n::: {.callout-warning}\n$$\n(a+b)^2 \\neq a^2+b^2, \\ \\mathrm{sondern} \\ (a+b)^2=a^2+2ab+b^2\n$$\n:::\n\n::: {#dc772215 .cell execution_count=9}\n``` {.python .cell-code}\n(a+b)**2 == a**2 + b**2\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nFalse\n```\n:::\n:::\n\n\n## Indizes und Summenzeichen\n\nEin Index (Plural Indizes) ist ein Zeichen, das an Symbole für Variable, Funktionen oder Operationen angebracht wird.\nBezeichnet man z.B. Variable mit $x$, dann kennzeichent man verschiedene Variable dudurch, dass man an das $x$ verschiedene tiefgestellte Indizes anhängt: $x_1, x_2, x_3, \\dots$\n\nDas Summenzeichen, (entstanden aus dem griechischen Buchstaben für S) dient zur vereinfachten Darstellung von Summen:\n\n::: {.callout-important}\n## Summenzeichen\n$$\n\\sum_{k=1}^n = a_k=a_1+a_2+a_3+\\cdots+a_n,\n$$ {#eq-summe}\ngespochen als: Summe über $a_k$ von $k=1$ bis $k=n$.\n:::\n\nMan erhält alle Summanden der Summe, wenn man in $a_k$ für den Index $k$ zunächst 1, dann 2 usw. und schließlich $n$ setzt.\nDieser Buchstabe $k$ heißt Summationsindex und kann durch einen beleibigen anderen Buchstaben ersetzt werden.\n\n::: {.callout-tip}\n## Beispiel für Summen\n$\\sum_{k=1}^6 k^2= 1^2+2^2+3^2+4^2+5^2+6^2=1+4+9+16+25+36=91$\n:::\n\nIn Python können wir Summen auf verschiedene Weisen berechnen:\n\n::: {#60c99492 .cell execution_count=10}\n``` {.python .cell-code}\n# manuelles Addieren\nsum_1 = 1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2\nassert sum_1 == 91\n\n# Addieren in einer for-Schleife\nsum_2 = 0\nks = [1,2,3,4,5,6]                  # <1>\nfor s in ks:                        # <2>\n  sum_2 += s**2                     # <3>\n\n## Addieren über den Index\nsum_3 = 0\nfor i in range(len(ks)):            # <4>\n  sum_3 += ks[i]**2                 # <5>\n\nassert sum_1 == sum_2 == sum_3\n```\n:::\n\n\n1. Definition der Werte für den Summationsindex $k$ als Python Liste.\nZur Erstellung einer Liste geben wir die Werte, getrennt durch ein Komma, in eckigen Klammern an.\nDas Ergebis dieser Definition ist Objekt des Datentyps `list`.\n2. Beginn einer `for` Schleife mit `s` als Schleifenvariable und dem Objekt `ks`.\nDiese Anweisung führt dazu, dass die nächste Code-Zeile (3) für jedes Element in `ks` einmal ausgeführt wird.\n3. Der Wert von `sum_2` wird um das Quadrat des jeweiligen Elements `s` erhöht.\n4. Python erzeugt automatisch einen Index für jedes `list` Objekt.\nWir können mit dem Ausdruck `range(len(ks))` eine neue Liste dieser Indizes erzeugen.\nDie Indizes in Python beginnen, abweichend von der mathematischen Definition, mit 0 und enden demgemäß mit $n-1$, in unserem Beispiel mit 5.\nWir werden in der Lektion [Zahlenbereiche und Zahlensyteme](3-mengen.qmd) sehen, wie wir die Funktion `range()` korrekt anwenden.\n5. Auf das $i$-te Element einer Liste kann mit `list[i]` zugegriffen werden.\nDer Ausdruck `ks[i]` ist also synonym zum Ausdruck `s` im vorangehenden Code-Beispiel.\n\n## Übungen {#sec-ubung}\n\nWir werden in dieser Lektion ein paar einfache Rechenübungen durchführen, bevor wir dann ab der nächsten Lektion mit [Jupyter Notebooks](https://jupyter.org/) arbeiten werden.\nDeine erste Aufgabe besteht also darin, dir eine entsprechende Arbeitsumgebung einzurichten.\nFalls du noch kein Python auf deinem Rechner hast, empfehle ich dir, zuerst *Miniconda* entsprechend diesen [Anleitungen](https://docs.anaconda.com/miniconda/miniconda-install/) zu installieren.\nWenn das geschafft ist, dann kannst du mit einem Befehl wie\n```shell\nconda create -n matheKapieren python=3.12\n```\nin deiner Kommandozeile eine neue Arbeitsumgebung einrichten und Python installieren.\nUm die Arbeitsumgebung zu aktivieren, setze den Befehl `conda activate matheKapieren` ab, dann kannst du auf alle Python Werkzeuge zugreifen.\nSchließlich kannstdu mit `conda install -c conda-forge jupyter` Jupyter und später noch weitere Pakete installieren.\n\nNun aber zu den Übungen:\nwenn du bei einer Aufgabe Schwierigkeiten hast, schau dir den entsprechenden Lösungshinweis an, und vergleiche dann deine Lösung mit meinem Lösungsvorschlag.\nMache dir aber auf jeden Fall Gedanken, wie du die Aufgabe lösen kannst.\nWenn du gleich zur Lösung springst, wirst du *nichts* lernen.\n\n::: {.callout-caution}\n## Aufgabe 1\nBerechne die Quersumme von $1.234.567.890$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hinweis\nDie Quersumme einer Zahl ist die Summe ihrer Ziffern.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n1+2+3+4+5+6+7+8+9+0=45\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 2\nLeite die 2. binomische Formel her.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hinweis\nGehe genauso vor wie bei der Herleitung der 1. binomischen Formel in @sec-binom.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n(a-b)^2=(a-b)(a-b)=aa-ab-ba+bb=a^2-2ab+b^2\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 3\nLeite die 3. binomische Formel her.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n(a+b)(a-b)=aa-ab+ba-bb=aa-bb=a^2-b^2\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 4\nBerechne $3(200+7)$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n3(200+7)=3\\cdot 200+3\\cdot 7= 600+21=621\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 5\nVereinfache den Term: $abc-acd+ace$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hinweis\nKlammere die gemeinsamen Faktoren aus.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\nabc-acd+ace=ac(b-d+e)\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 6\nVereinfache den Term: $-5x^2+25xy-35zx$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n-5x^2+25xy-35zx=-5x(x-5y+7z)\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 7\nIst 11.543.711 durch 11 teilbar?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hinweis\nVerwende die alternierende Quersumme.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n11.513.511 ist nicht durch 11 teilbar, denn die alternierende Quersumme $+1-1+5-1+3-5+1-1=2$ ist nicht teilbar durch 11.\n:::\n\n::: {.callout-caution}\n## Aufgabe 8\nBerechne $21^2$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hinweis\nVersuche, die 1. binomische Formel anzuwenden.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n21^2=(20+1)^2=20^2+2\\cdot 20\\cdot 1+1^2=400+40+1=441\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 9\nBerechne $19^2$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n19^2=(20-1)^2=20^2-2\\cdot 20\\cdot 1+1^2=400-40+1=361\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 10\nVereinfache den Term: $5(x-2(x-y-3y-6x-3y)+2y)$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n\\begin{align}\n5(x-2(x-y-3y-6x-3y)+2y) &= 5(x-2(-5x-7y)+2y)\\\\\n&=5(x+10x+14y+2y)\\\\\n&=5(11x+16y)\\\\\n&=55x+80y\n\\end{align}\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 11\nBerechne $21\\cdot 19$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Hinweis\nVersuche, die 3. binomische Formel anzuwenden.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n21 \\cdot 19=(20+1)(20-1)=20^2-1^2=400-1=399\n$$\n:::\n\n::: {.callout-caution}\n## Aufgabe 12\nBerechne $17\\cdot 23$.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Lösung\n$$\n17 \\cdot 23=(20-3)(20+3)=20^2-3^2=400-9=391\n$$\n:::\n\n",
    "supporting": [
      "1-rechenregeln_files"
    ],
    "filters": [],
    "includes": {}
  }
}